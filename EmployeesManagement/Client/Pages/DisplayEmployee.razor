@using EmployeesManagement.Shared
@using EmployeesManagement.Server.Services
@using PragrimTech.Components

    <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
        <div class="card-header">
            <input type="checkbox" checked="@IsSelected" @onchange="CheckBoxChanged" />
            <h3>@Employee.FirstName @Employee.LastName</h3>
        </div>
        <img class="card-img-top imageThumbnail" src="@Employee.PhotoPath" />
        @if (ShowFooter)
        {
            <div class="card-footer text-center">
                <a href="@($"employeedetails/{Employee.EmployeeId}")"
                   class="btn btn-primary m-1">View</a>

                <a href="@($"editemployee/{Employee.EmployeeId}")"
                   class="btn btn-primary m-1">Edit</a>

                <button type="button" class="btn btn-danger m-1"
                        @onclick="Delete_Click">
                    Delete
                </button>
            </div>
        }
    </div>


    <Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click"
             ConfirmationMessage=@($"Are you sure you want to delete \"{Employee.FirstName}\"")>
    </Confirm>

@code {
    [Parameter]
    public Employee Employee { get; set; }

    [Parameter]
    public bool ShowFooter { get; set; }

    protected bool IsSelected { get; set; }

    [Parameter]
    public EventCallback<bool> OnEmployeeSelection { get; set; }

    protected async Task CheckBoxChanged(ChangeEventArgs e)
    {
        IsSelected = (bool)e.Value;
        await OnEmployeeSelection.InvokeAsync(IsSelected);
    }

    [Parameter]
    public EventCallback<int> OnEmployeeDeleted { get; set; }

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    protected Confirm DeleteConfirmation { get; set; }

    protected void Delete_Click()
    {
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await EmployeeService.DeleteEmployee(Employee.EmployeeId);
            await OnEmployeeDeleted.InvokeAsync(Employee.EmployeeId);
        }
    }
}
